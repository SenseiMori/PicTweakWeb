// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebPicTweak.Infrastructure;

#nullable disable

namespace WebPicTweak.Infrastructure.Migrations
{
    [DbContext(typeof(LogDbContext))]
    [Migration("20251002075737_update logTable")]
    partial class updatelogTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Logs")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebPicTweak.Core.Models.Log.ImageLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("HasMetadata")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double>("SpentTime")
                        .HasColumnType("double precision");

                    b.Property<string>("WidthHeight")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("ImageLogs", "Logs");
                });

            modelBuilder.Entity("WebPicTweak.Core.Models.Log.SessionLog", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAuthorized")
                        .HasColumnType("boolean");

                    b.Property<string>("PathToZip")
                        .HasColumnType("text");

                    b.Property<DateTime>("SessionCreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("SpentTime")
                        .HasColumnType("double precision");

                    b.Property<Guid>("UserLogId")
                        .HasColumnType("uuid");

                    b.HasKey("SessionId");

                    b.HasIndex("UserLogId");

                    b.ToTable("SessionLogs", "Logs");
                });

            modelBuilder.Entity("WebPicTweak.Core.Models.Log.UserLog", b =>
                {
                    b.Property<Guid>("UserLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserLogId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("UserLogs", "Logs");
                });

            modelBuilder.Entity("WebPicTweak.Core.Models.Users.AccountBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Accounts", "Accounts");

                    b.HasDiscriminator<string>("AccountType").HasValue("AccountBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WebPicTweak.Core.Models.Users.Account", b =>
                {
                    b.HasBaseType("WebPicTweak.Core.Models.Users.AccountBase");

                    b.HasDiscriminator().HasValue("RegisteredUser");
                });

            modelBuilder.Entity("WebPicTweak.Core.Models.Users.GuestAccount", b =>
                {
                    b.HasBaseType("WebPicTweak.Core.Models.Users.AccountBase");

                    b.Property<DateTime>("EntryTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasDiscriminator().HasValue("GuestUser");
                });

            modelBuilder.Entity("WebPicTweak.Core.Models.Log.ImageLog", b =>
                {
                    b.HasOne("WebPicTweak.Core.Models.Log.SessionLog", "Session")
                        .WithMany("ImageLogs")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("WebPicTweak.Core.Models.Log.SessionLog", b =>
                {
                    b.HasOne("WebPicTweak.Core.Models.Log.UserLog", "UserLog")
                        .WithMany("SessionLogs")
                        .HasForeignKey("UserLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("WebPicTweak.Core.Models.Image.ModifierOptions", "Options", b1 =>
                        {
                            b1.Property<Guid>("SessionLogSessionId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Compress")
                                .HasColumnType("integer")
                                .HasColumnName("Compress");

                            b1.Property<bool>("RemoveEXIF")
                                .HasColumnType("boolean")
                                .HasColumnName("RemoveEXIF");

                            b1.Property<int>("SizeScale")
                                .HasColumnType("integer")
                                .HasColumnName("SizeScale");

                            b1.HasKey("SessionLogSessionId");

                            b1.ToTable("SessionLogs", "Logs");

                            b1.WithOwner()
                                .HasForeignKey("SessionLogSessionId");
                        });

                    b.Navigation("Options")
                        .IsRequired();

                    b.Navigation("UserLog");
                });

            modelBuilder.Entity("WebPicTweak.Core.Models.Log.UserLog", b =>
                {
                    b.HasOne("WebPicTweak.Core.Models.Users.AccountBase", "AccountBase")
                        .WithOne("UserLog")
                        .HasForeignKey("WebPicTweak.Core.Models.Log.UserLog", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountBase");
                });

            modelBuilder.Entity("WebPicTweak.Core.Models.Users.AccountBase", b =>
                {
                    b.OwnsOne("WebPicTweak.Core.Models.Users.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("AccountBaseId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("Email");

                            b1.HasKey("AccountBaseId");

                            b1.ToTable("Accounts", "Accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountBaseId");
                        });

                    b.OwnsOne("WebPicTweak.Core.Models.Users.NickName", "NickName", b1 =>
                        {
                            b1.Property<Guid>("AccountBaseId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("NickName");

                            b1.HasKey("AccountBaseId");

                            b1.ToTable("Accounts", "Accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountBaseId");
                        });

                    b.OwnsOne("WebPicTweak.Core.Models.Users.PasswordHash", "PasswordHash", b1 =>
                        {
                            b1.Property<Guid>("AccountBaseId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("PasswordHash");

                            b1.HasKey("AccountBaseId");

                            b1.ToTable("Accounts", "Accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountBaseId");
                        });

                    b.Navigation("Email");

                    b.Navigation("NickName");

                    b.Navigation("PasswordHash");
                });

            modelBuilder.Entity("WebPicTweak.Core.Models.Log.SessionLog", b =>
                {
                    b.Navigation("ImageLogs");
                });

            modelBuilder.Entity("WebPicTweak.Core.Models.Log.UserLog", b =>
                {
                    b.Navigation("SessionLogs");
                });

            modelBuilder.Entity("WebPicTweak.Core.Models.Users.AccountBase", b =>
                {
                    b.Navigation("UserLog")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
