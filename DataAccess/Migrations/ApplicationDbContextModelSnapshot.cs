// <auto-generated />
using DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestModels.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayOrder = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            DisplayOrder = 2,
                            Name = "Mystic"
                        },
                        new
                        {
                            Id = 3,
                            DisplayOrder = 3,
                            Name = "History"
                        },
                        new
                        {
                            Id = 4,
                            DisplayOrder = 4,
                            Name = "SciFi"
                        });
                });

            modelBuilder.Entity("TestModels.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ISBN")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ListPrice")
                        .HasColumnType("float");

                    b.Property<double>("ListPrice100")
                        .HasColumnType("float");

                    b.Property<double>("ListPrice50")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Authorqweqw",
                            CategoryId = 1,
                            Description = "descuyi",
                            ISBN = 12345,
                            ImageURL = "",
                            ListPrice = 90.0,
                            ListPrice100 = 70.0,
                            ListPrice50 = 80.0,
                            Title = "TestTitle1"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Authorewq",
                            CategoryId = 2,
                            Description = "descewqeqwe ",
                            ISBN = 12345,
                            ImageURL = "",
                            ListPrice = 50.0,
                            ListPrice100 = 33.0,
                            ListPrice50 = 40.0,
                            Title = "TestTitle2"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Authorшгн",
                            CategoryId = 1,
                            Description = "denvcnvcnvcsc ",
                            ISBN = 12345,
                            ImageURL = "",
                            ListPrice = 865.0,
                            ListPrice100 = 234.0,
                            ListPrice50 = 457.0,
                            Title = "TestTitle3"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Authorуке",
                            CategoryId = 2,
                            Description = "desc ",
                            ISBN = 12345,
                            ImageURL = "",
                            ListPrice = 865.0,
                            ListPrice100 = 234.0,
                            ListPrice50 = 457.0,
                            Title = "TestTitle23"
                        });
                });

            modelBuilder.Entity("TestModels.Product", b =>
                {
                    b.HasOne("TestModels.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
